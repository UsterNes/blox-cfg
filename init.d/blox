#!/bin/bash

# chkconfig: 345 64 35
### BEGIN INIT INFO
# Provides: blox
# Required-Start:
# Required-Stop:
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Short-Description: Blox utils 
# Description: Blox Utils and Scripts
### END INIT INFO


bloxngxdir=/usr/local/ngx-blox/
rundir=$bloxngxdir/run
logdir=$bloxngxdir/logs

export PATH=$PATH:/usr/local/sbin/
export STARTOPTIONS="-m512 -M32"

start_opensips() {
    opensipsctl start
}

stop_opensips() {
    opensipsctl stop
    source /usr/local/etc/opensips/opensipsctlrc

    #Remove the TLS and TCP connection state from the DB, as they become invalid, need re-registeration from SIP client
    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationtrunk      WHERE contact like '%transport=tls%';"
    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationtrunk      WHERE contact like '%transport=tcp%';"

    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationpbx        WHERE contact like '%transport=tls%';"
    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationpbx        WHERE contact like '%transport=tcp%';"

    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationpresence   WHERE contact like '%transport=tls%';"
    mysql -u $DBRWUSER --password=$DBRWPW $DBNAME -e "DELETE FROM locationpresence   WHERE contact like '%transport=tcp%';"
}

restart_opensips() {
    opensipsctl restart
}

status_opensips() {
    opensipsctl fifo get_statistics rcv_requests
    opensipsctl fifo get_statistics shmem:
}

setup_opensips() {
    ubuntu=$(python -mplatform | grep -i ubuntu)
    if [ -n "$ubuntu" ]
    then
    	update-rc.d mysql defaults
    	/etc/init.d/mysql start
    else
    	/sbin/chkconfig mysqld --add
    	/sbin/chkconfig --level 345 mysqld on
    	/etc/init.d/mysqld start
    fi
    source /usr/local/etc/opensips/opensipsctlrc

    OPENSIPS_DBVER=$(mysql -u $DBRWUSER --password=$DBRWPW -e "show databases" | grep "^opensips_" | head -1 | sed 's/^opensips_//')
    if [ -n "$OPENSIPS_DBVER" ] ; then
        BLOX_MIGRATE=$(cat /etc/.blox_migrate)
        /usr/bin/blox_db_install.sh $OPENSIPS_DBVER $BLOX_MIGRATE
    else
        /usr/bin/blox_db_install.sh
    fi
    
    rm /etc/.blox_setup
    rm /etc/.blox_migrate
}

start_blox() {
	mkdir -p $rundir $logdir
	/usr/local/ngx-blox/sbin/nginx 1>>$logdir/nginx-blox.startup 2>&1 
	if [ $? -eq 0 ]; then
		echo -e "\e[1;32mngx-blox Server Started... \e[0m"
	else
		echo -e "\e[1;31mngx-blox Server Failed to Start... \e[0m"
	fi
	nohup /usr/bin/send_notify.sh &
	nohup /usr/bin/listen_subscribe.sh &
		
}

stop_blox() {
	if [ -f $rundir/nginx.pid ]
	then
		kill $(cat $rundir/nginx.pid)
		if [ $? -eq 0 ]; then
			echo -e "\e[1;32mngx-blox Server Stopped... \e[0m"
		else
			echo -e "\e[1;31mngx-blox Server Failed to Stop... \e[0m"
		fi
	fi
}

restart_blox() {
	stop_blox
	start_blox
}

status_blox() {
	if [ -f $rundir/nginx.pid ]
	then
		PID=$(cat $rundir/nginx.pid)
	fi
	if [ -n "$PID" ]
	then
		echo -e "\e[1;32mngx-blox Server Running ... $PID\e[0m"
	else
		echo -e "\e[1;31mngx-blox Server Not Running ... \e[0m"
	fi	
}


usage() {
  echo "usage: $0 [start|stop|restart|status]" >&2;
}

case "$1" in
start)
	start_blox
	if [ -f /etc/.blox_setup ]
	then
	    setup_opensips;
	    rm -f /etc/.blox_setup
	fi
	start_opensips;
	;;
stop)
	stop_blox;
	stop_opensips;
	;;
restart)
	restart_blox;
	restart_opensips;
	;;
status)
	status_blox;
	status_opensips;
	;;
*)
	usage;
	;;
esac

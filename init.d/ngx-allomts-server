#!/bin/bash

# chkconfig: 345 55 35

if [ -n "$DEVEL" ]
then
	export MEDIAPROFILE_CONFIGDIR=$PWD/etc/blox_mediaprofiles
else
	export MEDIAPROFILE_CONFIGDIR=/etc/blox_mediaprofiles
	export PREFIX=MEDIA_
fi

if [ -f /sbin/iptables ]
then
	export IPTABLES=/sbin/iptables
elif [ -f /usr/sbin/iptables ]
then
	export IPTABLES=/usr/sbin/iptables
else
	echo "Error: No IPTables installed" >&2
	exit -1
fi

SUPPORT_PS_P=$(ps -p $$ 2>/dev/null)

init_iptables() {
	ETH_IF=$1
	IPMASK=$2
	START=$3
	END=$4
	
	#adding the MINIUPNPD chain for filter
	$IPTABLES -A ${PREFIX}PREROUTING -t nat -i $ETH_IF -p udp --dport $START:$END -j MINIUPNPD
	$IPTABLES -t filter -A ${PREFIX}FORWARD -p udp --dport $START:$END -i $ETH_IF -j MINIUPNPD
	$IPTABLES -t nat -A ${PREFIX}POSTROUTING -s $IPMASK -o $ETH_IF -j MASQUERADE
}

delete_iptables() {
	ETH_IF=$1
	IPMASK=$2
	START=$3
	END=$4
	
	#adding the MINIUPNPD chain for filter
	$IPTABLES -D ${PREFIX}PREROUTING -t nat -i $ETH_IF -p udp --dport $START:$END -j MINIUPNPD
	$IPTABLES -t filter -D ${PREFIX}FORWARD -p udp --dport $START:$END -i $ETH_IF -j MINIUPNPD
	$IPTABLES -t nat -D ${PREFIX}POSTROUTING -s $IPMASK -o $ETH_IF -j MASQUERADE
}

flush_iptables() {
	$IPTABLES -t nat -F MINIUPNPD
	$IPTABLES -t nat -F ${PREFIX}POSTROUTING
	$IPTABLES -t nat -F ${PREFIX}PREROUTING
	$IPTABLES -t filter -F ${PREFIX}FORWARD
	$IPTABLES -t filter -F MINIUPNPD
}


start_allomtsserver() {
	flush_iptables
	for config in $MEDIAPROFILE_CONFIGDIR/*.init
	do
    		if [ "$config" = "$MEDIAPROFILE_CONFIGDIR/*.init" ]
    		then
    		  echo "Error: No miniupnpd configured"
    		  return
    		fi
    		unset EXTERNAL_INTERFACE EXTERNAL_MEDIA_IPMASK INTERNAL_INTERFACE \
    		    	INTERNAL_MEDIA_IPMASK MEDIA_INTERFACE MEDIA_IP MEDIA_IPMASK \
    		    	TRANSCODER_IP MINIUPNPD_PORT MINIUPNPD_SECRET RTPPORT_END RTPPORT_START \
    		    	RTPPROXY_LISTEN PROFILE_ID PROFILE_NAME

    		CONFIG_FILE=$(basename $config|sed 's/\.init$/.conf/')
    		source $config
    		if [ -n "$MEDIA_TRANSCODING" ]
		then
    			init_iptables $EXTERNAL_INTERFACE $MEDIA_IPMASK $RTPPORT_START $RTPPORT_END
    			init_iptables $INTERNAL_INTERFACE $MEDIA_IPMASK $RTPPORT_START $RTPPORT_END
      			$IPTABLES -t filter -I ${PREFIX}FORWARD -i $MEDIA_INTERFACE -p udp --sport $RTPPORT_START:$RTPPORT_END -j ACCEPT
			break ;
		fi
	done
	/usr/local/ngx-allomts-server/sbin/nginx 1>>/usr/local/ngx-allomts-server/logs/nginx.startup 2>&1 
}

stop_allomtsserver() {
	flush_iptables
	for config in $MEDIAPROFILE_CONFIGDIR/*.init
	do
    		if [ "$config" = "$MEDIAPROFILE_CONFIGDIR/*.init" ]
    		then
    		  echo "Error: No miniupnpd configured"
    		  return
    		fi
    		unset EXTERNAL_INTERFACE EXTERNAL_MEDIA_IPMASK INTERNAL_INTERFACE \
    		    	INTERNAL_MEDIA_IPMASK MEDIA_INTERFACE MEDIA_IP MEDIA_IPMASK \
    		    	TRANSCODER_IP MINIUPNPD_PORT MINIUPNPD_SECRET RTPPORT_END RTPPORT_START \
    		    	RTPPROXY_LISTEN PROFILE_ID PROFILE_NAME

    		CONFIG_FILE=$(basename $config|sed 's/\.init$/.conf/')
    		source $config
    		if [ -n "$MEDIA_TRANSCODING" ]
		then
    			delete_iptables $EXTERNAL_INTERFACE $MEDIA_IPMASK $RTPPORT_START $RTPPORT_END
    			delete_iptables $INTERNAL_INTERFACE $MEDIA_IPMASK $RTPPORT_START $RTPPORT_END
      			$IPTABLES -t filter -D ${PREFIX}FORWARD -i $MEDIA_INTERFACE -p udp --sport $RTPPORT_START:$RTPPORT_END -j ACCEPT
			break ;
		fi
	done

	if [ -f /usr/local/ngx-allomts-server/logs/nginx.pid ]
	then
		kill $(cat /usr/local/ngx-allomts-server/logs/nginx.pid)
	fi
}

restart_allomtsserver() {
	stop_allomtsserver
	start_allomtsserver
}

status_allomtsserver() {
  	#display all chains relative to miniupnpd
  	$IPTABLES -v -n -t nat -L MINIUPNPD
  	$IPTABLES -v -n -t nat -L ${PREFIX}PREROUTING
  	$IPTABLES -v -n -t nat -L ${PREFIX}POSTROUTING
  	$IPTABLES -v -n -t filter -L MINIUPNPD
  	$IPTABLES -v -n -t filter -L ${PREFIX}FORWARD

	if [ -f /usr/local/ngx-allomts-server/logs/nginx.pid ]
	then
		PID=$(cat /usr/local/ngx-allomts-server/logs/nginx.pid)
	fi
	if [ -n "$PID" ]
	then
		echo -e "\e[1;32mALLO MTS Server Running ... $PID\e[0m"
	else
		echo -e "\e[1;31mALLO MTS Server Not Running ... \e[0m"
	fi	
}


usage() {
  echo "usage: $0 [start|stop|restart|status]" >&2;
}

case "$1" in
start)
      OCT_ETH_PORT=1 /usr/sbin/allomts_card_detect
      if [ $? -eq 0 ] ; then start_allomtsserver; fi
      ;;
stop)
      stop_allomtsserver;
      ;;
restart)
      restart_allomtsserver;
      ;;
status)
      status_allomtsserver;
      ;;
*)
     usage;
     ;;
esac

exit 0

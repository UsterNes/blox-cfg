#!/bin/bash
#
# rtpengine		Startup script for NGCP rtpengine
#
# chkconfig: 345 55 35
# description: NGCP rtpengine
#
# processname: rtpengine
# config: /etc/sysconfig/rtpengine
# pidfile: /var/run/rtpengine.pid
#
### BEGIN INIT INFO
# Provides: rtpengine
# Required-Start: iptables
# Required-Stop:
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Short-Description: NGCP rtpengine
# Description: NGCP rtpengine 
### END INIT INFO

# Source function library.
if [ -e /etc/init.d/functions ]; then
. /etc/init.d/functions
DAEMON=daemon
STATUS=status
fi
if [ -e "/lib/lsb/init-functions" ]; then
. /lib/lsb/init-functions
DAEMON=start_daemon
STATUS=status_of_proc
fi

rtpengine=/usr/sbin/rtpengine
prog=rtpengine
CONFIGS=/etc/rtpengine/*.conf
LOG_FACILITY=local1
LOG_LEVEL=7
STOP_MAXRETRY=3

init_rtpengine() {
	RTPENGINE_NAME=$1
	if [ -f /etc/rtpengine/$RTPENGINE_NAME ]
	then
	        . /etc/rtpengine/$RTPENGINE_NAME
	else
		echo "Error: /etc/rtpengine/$RTPENGINE_NAME not present"
		exit -1
	fi
	
	pidfile=${PIDFILE-/var/run/$RTPENGINE_NAME.pid}
	lockfile=${LOCKFILE-/var/lock/$RTPENGINE_NAME}
	if [ ! -d /var/lib/rtpengine/ ]
	then
		mkdir -p /var/lib/rtpengine
	fi
	cachefile=/var/lib/rtpengine/$RTPENGINE_NAME.cfg
	RETVAL=0
	
	OPTS="--pidfile $pidfile"
	MODULE=0
}

status_rtpengine() {
	if [ -n "$LISTEN_CLI" ]; then
		HOST=$(echo $LISTEN_CLI | awk -F':' '{print $1}')
		PORT=$(echo $LISTEN_CLI | awk -F':' '{print $2}')
		/usr/bin/rtpenginectl $HOST $PORT "list numsessions"
		/usr/bin/rtpenginectl $HOST $PORT "list sessions"
	fi
}

build_opts() {
	shopt -s nocasematch
	#RPMS=`rpm -qa | grep ngcp-rtpengine-kernel`
	RPMS=1
	if [[ "$KERNEL" == "yes" && -n "$TABLE" && -n "$RPMS" ]]
	then
		MODULE=1
		OPTS+=" --table=$TABLE"
	else
		MODULE=0
		OPTS+=" --table=-1"
	fi

	if [[ "$FALLBACK" != "yes" ]]
	then
		OPTS+=" --no-fallback"
	fi
	shopt -u nocasematch

        if [[ -n "$RTP_IP" ]]
        then
                for IP in "${RTP_IP[@]}"
                do
                        OPTS+=" --interface=$IP"
                done
        fi

	if [[ -n "$LISTEN_TCP" ]]
	then
		OPTS+=" --listen-tcp=$LISTEN_TCP"
	fi

	if [[ -n "$LISTEN_UDP" ]]
	then
		OPTS+=" --listen-udp=$LISTEN_UDP"
	fi

	if [[ -n "$LISTEN_NG" ]]
	then
		OPTS+=" --listen-ng=$LISTEN_NG"
	fi

	if [[ -n "$LISTEN_CLI" ]]
	then
	    OPTS+=" --listen-cli=$LISTEN_CLI"
	fi

	if [[ -n "$TOS" ]]
	then
		OPTS+=" --tos=$TOS"
	fi

	if [[ -n "$TIMEOUT" ]]
	then
		OPTS+=" --timeout=$TIMEOUT"
	fi

	if [[ -n "$SILENT_TIMEOUT" ]]
	then
		OPTS+=" --silent-timeout=$SILENT_TIMEOUT"
	fi

	if [[ -n "$PORT_MIN" ]]
	then
		OPTS+=" --port-min=$PORT_MIN"
	fi

	if [[ -n "$PORT_MAX" ]]
	then
		OPTS+=" --port-max=$PORT_MAX"
	fi

	if [[ -n "$REDIS" ]]
	then
		OPTS+=" --redis=$REDIS"
	fi

	if [[ -n "$REDIS_DB" ]]
	then
		OPTS+=" --redis-db=$REDIS_DB"
	fi

	if [[ -n "$B2B_URL" ]]
	then
		OPTS+=" --b2b-url=$B2B_URL"
	fi

	if [[ -n "$LOG_LEVEL" ]]
	then
		OPTS+=" --log-level=$LOG_LEVEL"
	fi

	if [[ -n "$LOG_FACILITY" ]]
        then
                OPTS+=" --log-facility=$LOG_FACILITY"
        fi

	if [[ -n "$NUM_THREADS" ]]
        then
                OPTS+=" --num-threads=$NUM_THREADS"
        fi

        if [[ -n "$DELETE_DELAY" ]]
         then
                 OPTS+=" --delete-delay=$DELETE_DELAY"
        fi

        if [[ -n "$GRAPHITE" ]]
         then
                 OPTS+=" --graphite=$GRAPHITE"
        fi

        if [[ -n "$GRAPHITE_INTERVAL" ]]
         then
                 OPTS+=" --graphite-interval=$GRAPHITE_INTERVAL"
        fi

	if [[ -n "$LOG_FACILITY_CDR" ]]
        then
                OPTS+=" --log-facility-cdr=$LOG_FACILITY_CDR"
        fi
}

cmd_exec() {
	CMD=${1:-echo -n}
	RETRY=${2:-1}
	SLEEP=${3:-0}

	echo "cmd_exec:$CMD:" >&2 
	RET=1
	while [ $RET -ne 0 -a $RETRY -gt 0 ]; do
		eval $CMD; RET=$?; sleep $SLEEP; RETRY=$((RETRY-1))
	done
	return $RET
}

start() {
	pid=$(cat $pidfile 2>/dev/null) ; kill -0 $pid 2>/dev/null
	if [ $? -ne 0 ]; then
	build_opts
	if [[ $MODULE == 1 ]]
	then
		echo "Loading module for in-kernel packet forwarding"
		rmmod xt_RTPENGINE 2> /dev/null && sleep 1
		modprobe xt_RTPENGINE

cat > /var/tmp/rtpengine.rules <<EOF
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:rtpengine - [0:0]
-I MINIUPNPD -p udp --dport $PORT_MIN:$PORT_MAX -j rtpengine 
-I rtpengine -p udp --dport $PORT_MIN:$PORT_MAX -j ACCEPT 
-I rtpengine -p udp -j RTPENGINE --id $TABLE
COMMIT
EOF

		cat <<EOF > "$cachefile"
CUR_TABLE=$TABLE
EOF
	#iptables-restore --noflush /var/tmp/rtpengine.rules
	deploy_fw_rules /var/tmp/rtpengine.rules
	fi
        echo -n $"Starting $prog: "
        echo $DAEMON $rtpengine --pidfile=${pidfile} $rtpengine $OPTS
        $DAEMON $rtpengine --pidfile=${pidfile} $rtpengine $OPTS
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] && touch ${lockfile}
        return $RETVAL
	else
	echo "Already $RTPENGINE_NAME profile is running: $pid";
	fi
}

stop() {
	echo -n $"Stopping $prog: "
	killproc -p ${pidfile} $rtpengine
	RETVAL=$?
	echo
	if [ -f "$cachefile" ]
	then
		. "$cachefile"
		echo "Unloading module for in-kernel packet forwarding"
cat > /var/tmp/rtpengine.rules <<EOF
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:rtpengine - [0:0]
COMMIT
EOF
		deploy_fw_rules /var/tmp/rtpengine.rules
		if [ $? -eq 0 ]; then rm -f $cachefile; fi
	fi
 
	[ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
}

# See how we were called.
case "$1" in
  start)
	for config in $CONFIGS
	do
	init_rtpengine $(basename $config)
	start
	done
	deploy_fw_rules apply apply
	;;
  stop)
	for config in $CONFIGS
	do
	init_rtpengine $(basename $config)
	stop
	done
	deploy_fw_rules apply apply
	for table in $(ls /proc/rtpengine/ | egrep -wv '(control|list)')
	do
	cmd_exec "echo 'del $table' > /proc/rtpengine/control; rmmod xt_RTPENGINE" $STOP_MAXRETRY 1
	done
	;;
  status)
	for config in $CONFIGS
	do
	init_rtpengine $(basename $config)
        $STATUS -p ${pidfile} $rtpengine
	RETVAL=$?
	status_rtpengine
	done
	;;
  restart)
	for config in $CONFIGS
	do
	init_rtpengine $(basename $config)
	stop
	done
	deploy_fw_rules apply apply
	for table in $(ls /proc/rtpengine/ | egrep -wv '(control|list)')
	do
	cmd_exec "echo 'del $table' > /proc/rtpengine/control; rmmod xt_RTPENGINE" $STOP_MAXRETRY 1
	done
	for config in $CONFIGS
	do
	init_rtpengine $(basename $config)
	start
	done
	deploy_fw_rules apply apply
	;;
  condrestart|try-restart)
	for config in $CONFIGS
	do
	init_rtpengine $(basename $config)
	if status -p ${pidfile} $rtpengine >&/dev/null; then
		stop
	fi
	done
	for config in $CONFIGS
	do
	init_rtpengine $(basename $config)
	if status -p ${pidfile} $rtpengine >&/dev/null; then
		start
	fi
	done
	;;
  *)
	echo $"Usage: $prog {start|stop|restart|condrestart|try-restart|status}"
	RETVAL=2
esac

exit $RETVAL
